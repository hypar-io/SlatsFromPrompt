// This code was generated by Hypar.
// Edits to this code will be overwritten the next time you run 'hypar init'.
// DO NOT EDIT THIS FILE.

using Elements;
using Elements.GeoJSON;
using Elements.Geometry;
using Elements.Geometry.Solids;
using Elements.Validators;
using Elements.Serialization.JSON;
using Hypar.Functions;
using Hypar.Functions.Execution;
using Hypar.Functions.Execution.AWS;
using Hypar.Model;
using System;
using System.Collections.Generic;
using System.Linq;
using Line = Elements.Geometry.Line;
using Polygon = Elements.Geometry.Polygon;

namespace ImageFromPrompt
{
    #pragma warning disable // Disable all warnings

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v12.0.0.0)")]
    
    public  class ImageFromPromptInputs : S3Args
    
    {
        [Newtonsoft.Json.JsonConstructor]
        
        public ImageFromPromptInputs(string @prompt, double @xDimension, double @yDimension, double @zDimension, int @slatCount, int @slatResolution, bool @invert, string bucketName, string uploadsBucket, Dictionary<string, string> modelInputKeys, string gltfKey, string elementsKey, string ifcKey):
        base(bucketName, uploadsBucket, modelInputKeys, gltfKey, elementsKey, ifcKey)
        {
            var validator = Validator.Instance.GetFirstValidatorForType<ImageFromPromptInputs>();
            if(validator != null)
            {
                validator.PreConstruct(new object[]{ @prompt, @xDimension, @yDimension, @zDimension, @slatCount, @slatResolution, @invert});
            }
        
            this.Prompt = @prompt;
            this.XDimension = @xDimension;
            this.YDimension = @yDimension;
            this.ZDimension = @zDimension;
            this.SlatCount = @slatCount;
            this.SlatResolution = @slatResolution;
            this.Invert = @invert;
        
            if(validator != null)
            {
                validator.PostConstruct(this);
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Prompt", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Prompt { get; set; } = "A honeycomb pattern.";
    
        [Newtonsoft.Json.JsonProperty("X Dimension", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double XDimension { get; set; } = 20D;
    
        [Newtonsoft.Json.JsonProperty("Y Dimension", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double YDimension { get; set; } = 20D;
    
        [Newtonsoft.Json.JsonProperty("Z Dimension", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double ZDimension { get; set; } = 20D;
    
        [Newtonsoft.Json.JsonProperty("Slat Count", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int SlatCount { get; set; } = 40;
    
        [Newtonsoft.Json.JsonProperty("Slat Resolution", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int SlatResolution { get; set; } = 10;
    
        [Newtonsoft.Json.JsonProperty("Invert", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Invert { get; set; } = false;
    
    }
}